# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Node(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, offset_y: float=None, offset_x: float=None, content: str=None, shape_type: str=None, shape_name: str=None):  # noqa: E501
        """Node - a model defined in Swagger

        :param id: The id of this Node.  # noqa: E501
        :type id: str
        :param offset_y: The offset_y of this Node.  # noqa: E501
        :type offset_y: float
        :param offset_x: The offset_x of this Node.  # noqa: E501
        :type offset_x: float
        :param content: The content of this Node.  # noqa: E501
        :type content: str
        :param shape_type: The shape_type of this Node.  # noqa: E501
        :type shape_type: str
        :param shape_name: The shape_name of this Node.  # noqa: E501
        :type shape_name: str
        """
        self.swagger_types = {
            'id': str,
            'offset_y': float,
            'offset_x': float,
            'content': str,
            'shape_type': str,
            'shape_name': str
        }

        self.attribute_map = {
            'id': 'id',
            'offset_y': 'offsetY',
            'offset_x': 'offsetX',
            'content': 'content',
            'shape_type': 'shape_type',
            'shape_name': 'shape_name'
        }

        self._id = id
        self._offset_y = offset_y
        self._offset_x = offset_x
        self._content = content
        self._shape_type = shape_type
        self._shape_name = shape_name

    @classmethod
    def from_dict(cls, dikt) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Node of this Node.  # noqa: E501
        :rtype: Node
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Node.


        :return: The id of this Node.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Node.


        :param id: The id of this Node.
        :type id: str
        """

        self._id = id

    @property
    def offset_y(self) -> float:
        """Gets the offset_y of this Node.


        :return: The offset_y of this Node.
        :rtype: float
        """
        return self._offset_y

    @offset_y.setter
    def offset_y(self, offset_y: float):
        """Sets the offset_y of this Node.


        :param offset_y: The offset_y of this Node.
        :type offset_y: float
        """

        self._offset_y = offset_y

    @property
    def offset_x(self) -> float:
        """Gets the offset_x of this Node.


        :return: The offset_x of this Node.
        :rtype: float
        """
        return self._offset_x

    @offset_x.setter
    def offset_x(self, offset_x: float):
        """Sets the offset_x of this Node.


        :param offset_x: The offset_x of this Node.
        :type offset_x: float
        """

        self._offset_x = offset_x

    @property
    def content(self) -> str:
        """Gets the content of this Node.


        :return: The content of this Node.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Node.


        :param content: The content of this Node.
        :type content: str
        """

        self._content = content

    @property
    def shape_type(self) -> str:
        """Gets the shape_type of this Node.


        :return: The shape_type of this Node.
        :rtype: str
        """
        return self._shape_type

    @shape_type.setter
    def shape_type(self, shape_type: str):
        """Sets the shape_type of this Node.


        :param shape_type: The shape_type of this Node.
        :type shape_type: str
        """

        self._shape_type = shape_type

    @property
    def shape_name(self) -> str:
        """Gets the shape_name of this Node.


        :return: The shape_name of this Node.
        :rtype: str
        """
        return self._shape_name

    @shape_name.setter
    def shape_name(self, shape_name: str):
        """Sets the shape_name of this Node.


        :param shape_name: The shape_name of this Node.
        :type shape_name: str
        """

        self._shape_name = shape_name
