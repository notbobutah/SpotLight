# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Connector(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, source_id: str=None, target_id: str=None, content: str=None):  # noqa: E501
        """Connector - a model defined in Swagger

        :param id: The id of this Connector.  # noqa: E501
        :type id: str
        :param source_id: The source_id of this Connector.  # noqa: E501
        :type source_id: str
        :param target_id: The target_id of this Connector.  # noqa: E501
        :type target_id: str
        :param content: The content of this Connector.  # noqa: E501
        :type content: str
        """
        self.swagger_types = {
            'id': str,
            'source_id': str,
            'target_id': str,
            'content': str
        }

        self.attribute_map = {
            'id': 'id',
            'source_id': 'sourceID',
            'target_id': 'targetID',
            'content': 'content'
        }

        self._id = id
        self._source_id = source_id
        self._target_id = target_id
        self._content = content

    @classmethod
    def from_dict(cls, dikt) -> 'Connector':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Connector of this Connector.  # noqa: E501
        :rtype: Connector
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Connector.


        :return: The id of this Connector.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Connector.


        :param id: The id of this Connector.
        :type id: str
        """

        self._id = id

    @property
    def source_id(self) -> str:
        """Gets the source_id of this Connector.


        :return: The source_id of this Connector.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id: str):
        """Sets the source_id of this Connector.


        :param source_id: The source_id of this Connector.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def target_id(self) -> str:
        """Gets the target_id of this Connector.


        :return: The target_id of this Connector.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id: str):
        """Sets the target_id of this Connector.


        :param target_id: The target_id of this Connector.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def content(self) -> str:
        """Gets the content of this Connector.


        :return: The content of this Connector.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Connector.


        :param content: The content of this Connector.
        :type content: str
        """

        self._content = content
